<?php

namespace App\Http\Controllers\Marketing;

use App\Helpers\RequestHelper;
use App\Jobs\SmsShareNotification;
use App\Mail\Share;
use App\Marketing\EmailLink;
use App\Marketing\SendingSms;
use App\Marketing\ShareList;
use App\Option;
use Carbon\Carbon;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Validator;

class ShareListController extends Controller
{

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if ($request->filled('phone')) {
            $request->merge(
                ['phone' => (int)str_replace(
                    [')', '(', ' ', '+', '-'],
                    '',
                    $request->input('phone'))
                ]);
        }
        $data = $request->all();
        $rules = [];
        if ($request->filled('type') && $request->input('type') === 'email') {
            $rules = [
                'email' => 'required|string|email|max:255',
            ];

        } elseif ($request->filled('type') && $request->input('type') === 'phone') {
            $rules = [
                'phone' => 'required|numeric|digits:' .  RequestHelper::requestDomain()->options['phone_digits'],
            ];

        }
        $rules = array_merge($rules, [
            'g-recaptcha-response' => 'required|captcha',
            'type' => 'required|in:email,phone',
            'url' => 'required|string|max:255',
        ]);
        $validator = Validator::make($data, $rules, [
            'email.email' => 'Некорректный email.',
            'email.required' => 'Некорректный email.',
            'phone.required' => 'Некорректный телефон.',
            'phone.digits' => 'Некорректный телефон.',
            'phone.int' => 'Некорректный телефон.',
        ]);

        $errors = $validator
            ->errors()
            ->all();


        if ($errors) return response()->json(['error' => implode(' ', $errors)], 419);

        $share = ShareList::create([
            'email' => $request->email,
            'phone' => $request->phone,
            'url' => $request->input('url'),
            'type' => $request->input('type'),
        ]);
        if ($share->type === 'email' && Option::get('send_share_by_email')) {

            Mail::to($share->email)->queue(new Share('TRANS-BAZA.RU - ссылка от друга', $share));
        }
        if ($share->type === 'phone' && Option::get('send_share_by_phone')) {
            dispatch(new SmsShareNotification($share));
        }
        $share->refresh();
        return response()->json(['message' => 'Успешно отправлено на ' .
            ($share->type === 'phone'
                ? $share->phone_format
                : $share->email)
        ]);
    }

    function sorryPage(Request $request)
    {

        if ($request->filled('dis_id')) {
            $share = ShareList::whereConfirmStatus(0)->find($request->dis_id);
            if ($share) {
                $share->update([
                    'confirm_status' => 2,
                    'confirm_at' => Carbon::now()
                ]);
            }

        }
    }

    private function pixel()
    {
        return base64_decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEUAAACnej3aAAAAAXRSTlMAQObYZgAAAApJREFUCNdjYAAAAAIAAeIhvDMAAAAASUVORK5CYII=');
    }


    function getPixel($id)
    {
        $share = ShareList::findOrFail($id);

        if (!$share->is_watch && $share->type === 'email') {
            $share->update([
                'is_watch' => 1,
                'watch_at' => Carbon::now(),
            ]);
        }
        $headers = [
            'Content-Type' => 'image/png'
        ];

        return response()->stream(function () {
            echo $this->pixel();
        }, 200, $headers);
    }


    function getLiveCounter()
    {
        $headers = [
            'Content-Type' => 'image/gif'
        ];
        $config_code_color = "FFAA00";
        $config_font = 1;
        $base = base64_decode('');
        $img = imagecreatefromstring($base);
        $koliakincounter = Option::get('live_counter');
        $color = imagecolorallocate($img,
            hexdec(substr($config_code_color, 1, 2)),
            hexdec(substr($config_code_color, 3, 2)),
            hexdec(substr($config_code_color, 5, 2))
        );
        imagestring($img, $config_font, 5, 3, $koliakincounter, $color);
        return response()->stream(function () use ($img) {

            imagegif($img);
        }, 200, $headers);
    }

    function getFriendPixel($id)
    {
        $share = EmailLink::findOrFail($id);

        if (!$share->is_watch) {
            $share->update([
                'is_watch' => 1,
                'watch_at' => Carbon::now(),
            ]);
        }
        $headers = [
            'Content-Type' => 'image/png'
        ];

        return response()->stream(function () {
            echo $this->pixel();
        }, 200, $headers);
    }

    function getFsk(Request $request)
    {
        $sending = SendingSms::whereHash($request->hash)->findOrFail($request->sending_id);

        if (!$sending->watch_at) {
            $sending->update([
                'watch_at' => Carbon::now()
            ]);
        }
        $confirm_link = route('article_index', ['article' => 'thankyou', 'fsk_sending_id' => $sending->id, 'hash' => $sending->hash]);
        $cancel_link = route('article_index', ['article' => 'verysorry', 'dis_fsk_sending_id' => $sending->id, 'hash' => $sending->hash]);
        return view('marketing.fck', compact('sending', 'confirm_link', 'cancel_link'));
    }


}
